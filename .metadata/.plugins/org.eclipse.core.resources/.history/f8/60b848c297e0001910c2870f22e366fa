
import java.util.Iterator;

import BST.BinarySearchTree.BinaryNode;

public class AVLTree<T extends Comparable<? super T>> implements Iterable<T> {
	BinaryNode root;
	
	public AVLTree()
	{
		root = null;
		public int rotationCount = 0;
	}
	
	public int height()
	{
		return -1;
	}
	
	public void insert()
	{
		
	}
	
	public void remove()
	{
		
	}
	
	public void balanceLeft()
	{
		
	}
	
	public void balenceRight()
	{
		
	}
	
	public void singleLeft()
	{
		rotationCount++;
	}
	
	public void singleRight()
	{
		rotationCount++;
	}
	
	public void doubleLeft()
	{
		rotationCount = rotationCount + 2;
	}
	
	public void doubleRight()
	{
		rotationCount = rotationCount + 2;
	}
	
	public int getRotationCount()
	{
		return rotationCount;
	}

	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	public class BinaryNode()
	{
		private T element;
		private BinaryNode leftChild;
		private BinaryNode rightChild;

		public BinaryNode(T element) {
			this.element = element;
			this.leftChild = null;
			this.rightChild = null;
		}
	}
}