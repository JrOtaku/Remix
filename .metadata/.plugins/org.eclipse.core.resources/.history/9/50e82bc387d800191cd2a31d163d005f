import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Stack;

public class BinarySearchTree <T extends Comparable<? super T>> implements Iterable<T>{
	private BinaryNode root;
	private int size;
	
	public BinarySearchTree(){
		root = null;
		size = 0;
	}
	
	public boolean isEmpty(){
		 return root == null;
	}
	
	public int height(){
		if (root == null) return -1;
		return root.height();
	}
	
	public int size(){
		return size;
	}
	
	public ArrayList<T> toArrayList()
	{
		ArrayList<T> list = new ArrayList<T>();
		if(root == null) return list;
		root.toArrayList(list);
		return list;
	}
	
	public String toString() {
		return toArrayList().toString();
	}
	
	public Object[] toArray(){
		return toArrayList().toArray();
	}
	
	public boolean insert(T n) {
		if(n == null) throw new IllegalArgumentException();
		if(root == null) {
			root = new BinaryNode(n);
			size++;
			return true;
		}
		return root.insert(n);
	}

	public Iterator<T> iterator() {
		return new BSTIterator(root);
	}
	
	public class BSTIterator implements Iterator<T> {
		private Stack<BinaryNode> s = new Stack<BinaryNode>();

		public BSTIterator(BinaryNode root) {
			if(root != null) getLeftAncestors(root);
		}

		public boolean hasNext() {
			return !s.empty();
		}

		public T next() {
			if(!hasNext()) throw new NoSuchElementException();
			BinaryNode temp = s.pop();
			if (temp.rightChild != null) getLeftAncestors(temp.rightChild);
			return temp.element;
		}
		
		private void getLeftAncestors(BinaryNode n){
			s.push(n);
			if (n.leftChild != null) getLeftAncestors(n.leftChild);
		}

	}
	
	public Iterator<T> preOrderIterator()
	{
		return new PreOrderIterator(root);
	}
	
	public class PreOrderIterator implements Iterator<T> {
		private Stack<BinaryNode> s = new Stack<BinaryNode>();
		
		public PreOrderIterator(BinaryNode root) {
			if(root != null)s.push(root);
		}
		
		public boolean hasNext() {
			return !s.empty();
		}

		public T next() {
			if(!hasNext()) throw new NoSuchElementException();
			BinaryNode temp = s.pop();
			if(temp.rightChild != null) s.push(temp.rightChild);
			if(temp.leftChild != null) s.push(temp.leftChild);
			return temp.element;
		}
	}
	
	public class BinaryNode{
		private T element;
		private BinaryNode leftChild;
		private BinaryNode rightChild;
		
		public BinaryNode(T element){
			this.element = element;
			this.leftChild = null;
			this.rightChild = null;		
		}
		
//		public BinaryNode getLeftChild(){
//			return leftChild;
//		}
//		
//		public BinaryNode getRightChild(){
//			return rightChild;
//		}
//		
//		public T getElement(){
//			return element;
//		}
		
		public int height(){
			int leftHeight = 0;
			int rightHeight = 0;
			if(leftChild != null) leftHeight += leftChild.height() + 1;
			if(rightChild != null) rightHeight += rightChild.height() + 1;
			if(rightHeight > leftHeight) return rightHeight;
			return leftHeight;
		}
		
		public void toArrayList(ArrayList<T> list)
		{
			if(leftChild != null)
			{
				leftChild.toArrayList(list);
			}
			list.add(element);
			if(rightChild != null)
			{
				rightChild.toArrayList(list);
			}
		}
		
		public boolean insert(T n) {
			int v = n.compareTo(element);
			if(v < 0) {
				if(leftChild == null) {
					leftChild = new BinaryNode(n);
					size++;
					return true;
				}
				return leftChild.insert(n);
			}
			else if(v > 0) {
				if(rightChild == null) {
					rightChild = new BinaryNode(n);
					size++;
					return true;
				}
				return rightChild.insert(n);
			}
			else {
				return false;
			}
		}
	}
}
